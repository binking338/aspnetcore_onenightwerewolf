@model OneNightWerewolf.Web.Models.User;
@{
    ViewData["Title"] = "首页";
    if (ViewData["room.roles"] == null)
    {
        ViewData["room.roles"] = "01,01,01,02,02,05,06,07"; // 经典牌型
    }
}
<div class="container">
    <div class="row">
        <div class="col-2 pr-0 pl-0 align-middle text-right">
            <h6>我:</h6>
        </div>
        <div class="col-3">
            <h6 id="UserContainer">@ViewData["user.nick"]</h6>
        </div>
        <div class="col-4 pr-0 pl-0 align-middle text-right">
            <h6>时间:</h6>
        </div>
        <div class="col-3">
            <h6 id="TimeContainer"></h6>
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            <div class="btn-group  mb-3" role="group" aria-label="Game Menu">
                <button id="Config" type="button" class="btn btn-primary btn-lg">设置</button>
                <button id="Start" type="button" class="btn btn-primary btn-lg" disabled>开始</button>
                <button id="Choices" type="button" class="btn btn-primary btn-lg">刷新&nbsp;<span id="CountDown" style="display: inline-block; width: 1em"></span></button>
                <button type="button" class="btn btn-primary btn-lg dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                    <div class="dropdown-item form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="EnableAutoRefresh" value="EnableAutoRefresh" checked="checked">
                        <label class="form-check-label" for="EnableAutoRefresh">自动刷新</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="ConfigContainer" class="container">
    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">房间号</span>
                </div>
                <input id="RoomId" type="text" value="@Model.RoomId" placeholder="房间别进错" class="form-control form-control-lg" aria-label="RoomId" aria-describedby="basic-addon1">
                <div class="input-group-append">
                    <button id="Leave" class="btn btn-danger btn-lg" type="button">离开</button>
                    <button id="Join" class="btn btn-primary btn-lg" type="button">进入</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">角色牌</span>
                </div>
                <input id="Roles" type="text" value="@ViewData["room.roles"]" placeholder="角色编号参照简介" class="form-control form-control-lg" aria-label="Roles" aria-describedby="basic-addon1">
                <div class="input-group-append">
                    <button id="New" class="btn btn-primary btn-lg" type="button">创建</button>
                    <button type="button" class="btn btn-primary btn-lg dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu">
                        <button id="New3" roles="01,02,02,05,06,07" class="dropdown-item btn btn-outline-primary btn-lg" type="button">3人局</button>
                        <button id="New4" roles="01,01,02,02,05,06,07" class="dropdown-item btn btn-outline-primary btn-lg" type="button">4人局</button>
                        <button id="New5" roles="01,01,01,02,02,05,06,07" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局</button>
                        <button id="New6_zy" roles="01,01,01,02,02,03,05,06,07" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+爪牙</button>
                        <button id="New6_jg" roles="01,01,01,02,02,05,06,07,08" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+酒鬼</button>
                        <button id="New6_smz" roles="01,01,01,02,02,05,06,07,09" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+失眠者</button>
                        <button id="New6_lr" roles="01,01,01,02,02,05,06,07,10" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+猎人</button>
                        <button id="New6_pj" roles="01,01,01,02,02,05,06,07,11" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+皮匠</button>
                        <button id="New6_yl" roles="0,0,0,1,1,05,06,07,12" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+幽灵</button>
                        <button id="New7_zy_jg" roles="01,01,01,02,02,03,05,06,07,08" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+爪牙+酒鬼</button>
                        <button id="New7_zy_smz" roles="01,01,01,02,02,03,05,06,07,09" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+爪牙+失眠者</button>
                        <button id="New7_zy_lr" roles="01,01,01,02,02,03,05,06,07,10" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+爪牙+猎人</button>
                        <button id="New7_jg_smz" roles="01,01,01,02,02,05,06,07,08,09" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+酒鬼+失眠者</button>
                        <button id="New7_jg_lr" roles="01,01,01,02,02,05,06,07,08,10" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+酒鬼+猎人</button>
                        <button id="New7_smz_lr" roles="01,01,01,02,02,05,06,07,09,10" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+失眠者+猎人</button>
                        <button id="New7_syr" roles="01,01,01,02,02,04,04,05,06,07" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+2守夜人</button>
                        <button id="New7_zy_yl" roles="01,01,01,02,02,03,05,06,07,13" class="dropdown-item btn btn-outline-primary btn-lg" type="button">5人局+爪牙+幽灵</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button id="RefreshRommList" type="button" class="btn btn-light btn-lg btn-block mb-2">刷新房间</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div id="RoomListContainer" class="container">
                <div class="row">
                    <div class="col-6">
                    </div>
                    <div class="col-6">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="GameDashboard" class="container">
    <div class="row">
        <div class="col-2 pr-0 pl-0 align-middle text-right">
            <h6>角色:</h6>
        </div>
        <div class="col-10">
            <h6 id="RoleContainer"></h6>
        </div>
    </div>
    <div class="row">
        <div class="col-2 pr-0 pl-0 align-middle text-right">
            <h6>玩家:</h6>
        </div>
        <div class="col-10">
            <h6 id="PlayerContainer"></h6>
        </div>
    </div>
    <div class="container" id="MonitorContainer">
    </div>
    <div class="container pt-2  text-center" id="ChoicesContainer">
    </div>
    @*<div class="row pt-2">
            <div class="col text-center" id="ChoicesContainer">
            </div>
        </div>*@
</div>


@section Scripts{
    <script type="text/javascript">$(function () {

        function R(a, b) {
            return parseInt(a + Math.random() * Math.abs(b - a));
        }

        function CountDown(t, cb, selector) {
            var callee = arguments.callee;
            selector = selector || "#CountDown";
            if (callee[selector]) {
                clearTimeout(arguments.callee[selector]);
                callee[selector] = null;
            }
            $(selector).text(t);
            callee[selector] = setTimeout(function () {
                callee[selector] = null;
                if (t - 1 == 0) {
                    $("selector").text("0");
                    cb();
                } else {
                    callee(t - 1, cb, selector);
                }
            }, 1000);
        }

        function CancelCountDown(selector) {
            var callee = CountDown;
            selector = selector || "#CountDown";
            if (callee[selector]) {
                clearTimeout(callee[selector]);
                callee[selector] = null;
            }
            $(selector).text("");
        }

        function IsAutoRefreshEnabled() {
            return $("#EnableAutoRefresh").is(":checked")
        }

        function ToggleAutoRefresh() {
            if (IsAutoRefreshEnabled()) {
                Choices();
            } else {
                CancelCountDown();
            }
        }

        function AutoNextPhase() {
            if (IsAutoRefreshEnabled()) {
                CountDown(3, function () {
                    Choices();
                });
            } else {
                CancelCountDown();
            }
        }

        function CardMap() {
            return $.get("/api/game/cardmap")
                .done(function (data) {
                    CardMap.cache = data.data;
                });
        }

        function ToCardName(roles) {
            return roles.reduce(function (r, d, i, arr) {
                if (i == 0 || arr[i - 1] != d) {
                    r.push({
                        "role": d,
                        "num": 1
                    });
                } else {
                    r[r.length - 1].num++;
                }
                return r;
            }, [])
                .map(function (d, i) {
                    return d.num == 1 ? CardMap.cache[d.role] : (CardMap.cache[d.role] + "X" + d.num);
                }).join(", ");;
        }

        function Position() {
            return $.get("/api/game/position")
                .done(function (data) {
                    Position.cache = data.data;
                    if (IamRoomHolder()) {
                        $("#Start").removeAttr("disabled");
                        $("#Start").show();
                    } else {
                        $("#Start").attr("disabled", "disabled");
                        $("#Start").hide();
                        Position.cache = data.data;
                    }
                });
        }

        function IamRoomHolder() {
            return Position.cache ? Position.cache.isHolder : false;
        }

        function RoomList() {
            return $.get("/api/game/roomlist")
                .done(function (data) {
                    if (data.code == 0) {
                        $("#RoomListContainer").html("");
                        for (var i = 0; i < data.data.length; i++) {
                            var row = $("<div class='row'></div>");
                            var game1 = data.data[i];
                            var btn1 = $('<button class="btn btn-outline-primary btn-block mt-2" type="submit">加入</button>')
                                .prop("id", game1.id)
                                .click(function () {
                                    $("#RoomId").val($(this).prop("id"));
                                    Leave().then(Join);
                                });
                            var cap = game1.playerLimit;
                            var need = (cap - game1.players.length);
                            var info = cap + "人房 ";
                            info += need > 0 ? ("缺" + need + "人") : "满员";
                            var players = "";
                            players += game1.players.map(function (p) { return p.nick }).join(',');
                            var roles = "";
                            roles += ToCardName(game1.cards);

                            row.append($("<div class='col card text-left pl-0 pr-0 mb-2'></div>")
                                .append($("<div class='card-body'><div class='card-title clearfix'><h5 class='text-primary float-left'>" + game1.id + "</h5><div class='float-right'>" + info + "</div></div></div>")
                                    .append("<div>" + "<span class='font-weight-bold text-primary'>角色: </span>" + roles + "</div>")
                                    .append("<div>" + "<span class='font-weight-bold text-primary'>玩家: </span>" + players + "</div>")
                                    .append(btn1)));

                            $("#RoomListContainer").append(row);
                        }
                    }
                });
        }

        function DawnClock(dawntime, overtime) {
            var callee = arguments.callee;
            var selector = arguments.callee.container = "#TimeContainer";
            if (callee.handler) {
                clearTimeout(callee.handler);
                callee.handler = null;
                callee.time = null;
                callee.overtime = null;
            }
            if (dawntime <= 0) {
                $(selector).text("--:--");
            } else {
                callee.dawntime = dawntime;
                callee.overtime = overtime;
                (function () {
                    callee.handler = null;
                    overtime = DawnClock.overtime || (new Date().getTime() / 1000);
                    var duration = parseInt(overtime - DawnClock.dawntime);
                    $(selector).text(parseInt(duration / 60) + ":" + (duration % 60 < 10 ? "0" + duration % 60 : duration % 60));

                    if (callee.handler) {
                        clearTimeout(callee.handler);
                    }
                    callee.handler = setTimeout(arguments.callee, 1000)
                })();
            }
        }

        function Choices() {
            Cards();
            Buddies();
            Position();
            Screen();
            return $.get("/api/game/choices", null).done(function (data) {
                if (data.code > 0) {
                    if (data.code == 1) {
                        // 没登录
                        window.location = window.location;
                    } else if (data.code == 7) {
                        // 无房间
                        ConfigRoomButton(false);
                        $("#ChoicesContainer").html("")
                    }
                    //alert(data.message);

                } else {
                    AutoNextPhase();
                    if (data.data == null) {
                        return;
                    }
                    if (data.data.game != null) {
                        var dawnTime = data.data.game.dawnTime || 0;
                        var overTime = data.data.game.overTime;
                        DawnClock(dawnTime, overTime);
                    }

                    var choiceInfo = data.data;

                    $("#ChoicesContainer")
                        .html("")
                        .append("<h3>" + (choiceInfo.game.inGame ? choiceInfo.round.name : (IamRoomHolder() ? "等待玩家到齐" : "等待房主开始")) + "</h3>");

                    if (data.data.choices != null && data.data.choices.length > 0) {
                        var isStartRound = choiceInfo.round.phase == 0;
                        var isOverRound = choiceInfo.round.phase == 99;
                        var isVoteRound = choiceInfo.round.phase == 30 && choiceInfo.round.name == '投票';
                        var isNightPhase = choiceInfo.round.phase == 10;
                        if (isStartRound || isVoteRound || isOverRound) {
                            /* 身份 投票 结束 阶段不自动选 */
                            CancelCountDown();
                        } else if (isNightPhase && IsAutoRefreshEnabled()) {
                            CountDown(R(10, 15), function () {
                                var idx = R(0, choiceInfo.choices.length);
                                Action(choiceInfo.choices[idx]);
                            });
                        } else {
                            CountDown(R(1, 3), function () {
                                var idx = R(0, choiceInfo.choices.length);
                                Action(choiceInfo.choices[idx]);
                            });
                        }
                        choiceInfo.choices.forEach(function (choice, i) {
                            var btn = $("<a href='javascript:void(0)' />").text(choice);
                            if (isVoteRound) {
                                btn.click(function () {
                                    if (window.confirm("确定" + choice + "?")) {
                                        Action(choice);
                                    }
                                });
                            } else {
                                btn.click(function () {
                                    Action(choice);
                                });
                            }
                            $("#ChoicesContainer").append($("<h3>").append(btn));
                        });
                    } else {
                        choiceInfo.messages.forEach(function (message, i) {
                            $("#ChoicesContainer").append($("<h3>").text(message.content));
                        });
                        if (choiceInfo.game.inGame && (choiceInfo.messages == null || choiceInfo.messages.length == 0)) {
                            $("#ChoicesContainer").append($("<h3>").text("已操作"));
                        }
                    }
                }
            });
        }

        function Screen() {
            return $.get("/api/game/screen", null)
                .done(function (data) {
                    if (data.code > 0) {
                        //alert(data.message);
                    } else {
                        Screen.messages = data.data;
                        $("#MonitorContainer").html("");
                        if (data.data == null || data.data.length == 0) {
                            return;
                        }
                        data.data.forEach(function (msg, i) {
                            $("#MonitorContainer").append($('<div class="row">')
                                .append($('<div class="col-12">').append($("<h6>").text(msg.content))));
                            ;
                        });
                    }
                });
        }

        function Action(choice) {
            return $.post("/api/game/action?choice=" + encodeURIComponent(choice), null)
                .done(function (data) {
                    if (data.code > 0) {
                        if (data.code == 1) {
                            // 没登录
                            window.location = window.location;
                        } else if (data.code == 7) {
                            // 无房间
                            Choices();
                            return;
                        } else {
                            alert(data.message);
                        }
                    } else {
                        var choiceInfo = data.data;
                        $("#ChoicesContainer")
                            .html("")
                            .append("<h3>" + (choiceInfo.game.inGame ? choiceInfo.round.name : (IamRoomHolder() ? "等待玩家到齐" : "等待房主开始")) + "</h3>");
                        
                        choiceInfo.messages.forEach(function (message, i) {
                            $("#ChoicesContainer").append($("<h3>").text(message.content));
                        });
                        if (choiceInfo.game.inGame && (choiceInfo.messages == null || choiceInfo.messages.length == 0)) {
                            $("#ChoicesContainer").append($("<h3>").text("已操作"));
                        }
                        AutoNextPhase();
                    }
                });
        }

        function Buddies() {
            return $.get("/api/game/buddies")
                .done(function (data) {
                    if (data.code > 0) {
                        //alert(data.message);
                        $("#PlayerContainer").html("").append($("<h6 class='text-danger'>").html("请先加入房间"));
                        ConfigRoomButton(false);
                    } else {
                        $("#PlayerContainer").html("");
                        $("#PlayerContainer")
                            .append(data.data.map(function (p, i) {
                                if (i == 0) {
                                    var masterbtn = $("<a href='javascript:void(0)' />").append("[H]");
                                    return $("<span>").append(masterbtn).append(p.nick);
                                } else {
                                    var kickbtn = $("<a href='javascript:void(0)' />").append("[P]");
                                    if (IamRoomHolder()) kickbtn.click(function () { Kick(p); });
                                    return $("<span>").append(",&nbsp;").append(kickbtn).append(p.nick);
                                }
                            }));

                    }
                });
        }

        function Cards() {
            $.get("/api/game/cards")
                .done(function (data) {
                    if (data.code > 0) {
                        //alert(data.message);
                        $("#RoleContainer").html($("<h6 class='text-danger'>").html("请先加入房间"));
                    } else {
                        var roles = ToCardName(data.data)
                        $("#RoleContainer").html("");
                        $("#RoleContainer").append(roles);
                    }
                });
        }

        function Start() {
            return $.post("/api/game/start", null)
                .done(function (data) {
                    if (data.code > 0) {
                        alert(data.message);
                    } else {
                        Choices();
                    }
                });
        }

        function Leave() {
            if (IamRoomHolder() && !window.confirm("你是房主，确定离开房间么？")) {
                return;
            }
            return $.post("/api/game/leave", null)
                .done(function (data) {
                    if (data.code > 0) {
                        //alert(data.message);
                    }
                    ConfigRoomButton(false);
                    Choices();
                    Position();
                });
        }

        function Kick(player) {
            if (window.confirm("确认踢出玩家：" + player.nick)) {
                return $.post("/api/game/kick?id=" + encodeURIComponent(player.id), null)
                    .done(function (data) {
                        if (data.code > 0) {
                            alert(data.message);
                        } else {
                            Choices();
                        }
                    });
            }
        }

        function Join() {
            var roomId = $("#RoomId").val();
            if (!roomId) {
                $("#RoomId").focus();
                return;
            }
            return $.post("/api/game/join?roomId=" + encodeURIComponent(roomId), null)
                .done(function (data) {
                    if (data.code > 0) {
                        alert(data.message);
                    } else {
                        ConfigRoomButton(true);
                        Config();
                        Choices();
                    }
                    Position();
                });
        }

        function New() {
            var roomId = $("#RoomId").val();
            var roles = $("#Roles").val();
            if (!roomId) {
                $("#RoomId").focus();
                return;
            }
            if (!roles) {
                $("#Roles").focus();
                return;
            }
            try {
                roles = roles.split(',').map(i => i);
            }
            catch (e) {
                $("#Roles").focus();
                return;
            }
            return $.ajax({
                type: 'POST',
                url: "/api/game/roomnew?roomId=" + encodeURIComponent(roomId),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(roles),
                success: function (data) {
                    if (data.code > 0) {
                        $("#Roles").focus();
                        alert(data.message);
                    } else {
                        ConfigRoomButton(true);
                        Config();
                        Choices();
                    }
                    Position();
                }
            });

        }

        function NewByPreConfig() {
            $('#Roles').val($(this).attr("roles"));
            return New();
        }

        function Config() {
            if ($("#ConfigContainer").is(":hidden")) {
                RoomList();
            }
            $("#ConfigContainer").slideToggle();
            $("#GameDashboard").slideToggle();
        }

        function ConfigRoomButton(isEnter) {
            if (isEnter) {
                $('#Leave').show();
            } else {
                $('#Leave').hide();
            }
        }

        $('#New').click(New);
        $('#New3').click(NewByPreConfig);
        $('#New4').click(NewByPreConfig);
        $('#New5').click(NewByPreConfig);
        $('#New6_zy').click(NewByPreConfig);
        $('#New6_jg').click(NewByPreConfig);
        $('#New6_smz').click(NewByPreConfig);
        $('#New6_lr').click(NewByPreConfig);
        $('#New6_pj').click(NewByPreConfig);
        $('#New6_yl').click(NewByPreConfig);
        $('#New7_zy_jg').click(NewByPreConfig);
        $('#New7_zy_smz').click(NewByPreConfig);
        $('#New7_zy_lr').click(NewByPreConfig);
        $('#New7_jg_smz').click(NewByPreConfig);
        $('#New7_jg_lr').click(NewByPreConfig);
        $('#New7_smz_lr').click(NewByPreConfig);
        $('#New7_syr').click(NewByPreConfig);
        $('#New7_zy_yl').click(NewByPreConfig);
        $('#Join').click(function () { Leave().then(Join) });
        $('#Leave').click(function () { Leave().then(RoomList) });
        $('#Start').click(Start);
        $('#Choices').click(Choices);
        $('#EnableAutoRefresh').change(ToggleAutoRefresh);
        $('#Config').click(Config);
        $("#RefreshRommList").click(RoomList);
        $(document).keydown(function (event) {
            if (event.keyCode == 13) {
                $('#Join').triggerHandler('click');
            }
        });
        CardMap().then(Choices).then(RoomList);
    });</script>

    @if (!string.IsNullOrEmpty(Model.RoomId))
    {
        <script type="text/javascript">$(function () {
                $('#ConfigContainer').hide();
                //$('#Join').hide();
            });</script>
    }
    else
    {
        <script type="text/javascript">$(function () {
                $("#GameDashboard").hide();
                $('#Leave').hide();
            });</script>
    }
}
